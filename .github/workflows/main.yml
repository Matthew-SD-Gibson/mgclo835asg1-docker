name: Deploy to ECR
#try 13

on: 
  push:
    branches: [ main ]

jobs:
  
  build:
    
    name: Build Image
    runs-on: ubuntu-latest

   
    steps:

    - name: Check out code
      uses: actions/checkout@v4

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY_ID }}
        AWS_SESSION_TOKEN: ${{ secrets.AWS_SESSION_TOKEN }}
        AWS_REGION: us-east-1

    - name: Build, test, tag, and push image to Amazon ECR
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: mgibson13-asgn1-repository
        IMAGE_TAG: ${{ github.run_number }}
      run: |
        ls -ltra

        # Docker build command
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:my_app-v$IMAGE_TAG -f dockerfile .
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:my_db-v$IMAGE_TAG -f dockerfile_mysql .

        # Create network
        docker network create -d bridge my_network
        export DBPWD=${{ secrets.DBPASS }}
        export ECR=$ECR_REGISTRY/$ECR_REPOSITORY

        # Deploy database
        docker run -d --name my_db --network my_network -e MYSQL_ROOT_PASSWORD=$DBPWD  $ECR:my_db-v$IMAGE_TAG

        # Setup env variables
        export DBHOST=$(docker inspect -f '{{.NetworkSettings.Networks.my_network.IPAddress}}' my_db)
        export DBPORT=${{ secrets.DBPORT }}
        export DBUSER=${{ secrets.DBUSER }}

        # Wait for database to be ready - must show connection was successful before proceeding to next command
        until nc -z -v -w30 "$DBHOST" "$DBPORT"
        do
          echo "Waiting for $DBHOST:$DBPORT..."
          sleep 2
        done

        # Deploy app when database is ready
        docker run -d --name my_app --network my_network -p 8080:8080  -e DBHOST=$DBHOST -e DBPORT=$DBPORT -e  DBUSER=$DBUSER -e DBPWD=$DBPWD  -e APP_COLOR="blue" $ECR:my_app-v$IMAGE_TAG
        
        docker ps
        echo "Pause for 10 seconds to ensure container is deployed"
        sleep 10

        # Push images when successful
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:my_app-v$IMAGE_TAG
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:my_db-v$IMAGE_TAG
